<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.araguaneybits.trueque</groupId>
	<artifactId>araguaneybits-root</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>Araguaneybits ROOT project</name>
	<description>Araguaneybits : ROOT project</description>
	<developers>
		<developer>
			<id>jestevez</id>
			<name>Jose Luis Estevez</name>
			<email>jose.estevez.prieto@gmail.com</email>
			<roles>
				<role>Team Leader</role>
				<role>Systems Analyst</role>
				<role>Programmer</role>
			</roles>
		</developer>
	</developers>

	<modules>
		<module>../araguaneybits-commons</module>
		<module>../araguaneybits-database</module>
		<module>../araguaneybits-dao</module>
		<module>../araguaneybits-crypto</module>
		<module>../araguaneybits-tools</module>
		<module>../araguaneybits-services</module>
		<module>../araguaneybits-batch</module>
		<module>../araguaneybits-wallet</module>
	</modules>
	<properties>
		<!-- versions -->
		<spring.framework.version>4.3.21.RELEASE</spring.framework.version>
		<spring.integration.version>4.3.18.RELEASE</spring.integration.version>
		<spring.security.version>4.2.10.RELEASE</spring.security.version>
		<spring.security.oauth2.version>2.0.17.RELEASE</spring.security.oauth2.version>
		<jersey.version>2.6</jersey.version>
		<jackson.version>2.9.9</jackson.version>
		<jackson-databind.version>2.9.9.2</jackson-databind.version>
		<quartz.version>2.2.1</quartz.version>
		<org.aspectj-version>1.6.9</org.aspectj-version>
		<commons.lang3>3.6</commons.lang3>
		<commons.io>2.6</commons.io>
		<commons.dbcp2>2.5.0</commons.dbcp2>
		<commons.collections.version>3.2.2</commons.collections.version>
		<commons.beanutils.version>1.9.3</commons.beanutils.version>
		<commons.codec.version>1.9</commons.codec.version>
		<postgresql.version>42.2.5</postgresql.version>
		<slf4j.version>1.7.28</slf4j.version>
		<logback.version>1.2.3</logback.version>
		<okhttp.version>3.8.1</okhttp.version>
		<javax.servlet.version>3.1.0</javax.servlet.version>
		<javax.servlet.jsp.version>2.3.1</javax.servlet.jsp.version>
		<web3j.version>4.2.0</web3j.version>
		<hibernate-validator.version>5.2.3.Final</hibernate-validator.version>
		<!-- versions testing -->
		<junit.version>4.12</junit.version>
		<mockito.version>1.10.19</mockito.version>
		<jacoco.version>0.8.4</jacoco.version>
		<!-- setting -->
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<jacoco.it.execution.data.file>${project.build.directory}/coverage-reports/jacoco-it.exec</jacoco.it.execution.data.file>
		<jacoco.ut.execution.data.file>${project.build.directory}/coverage-reports/jacoco-ut.exec</jacoco.ut.execution.data.file>
		<skip.integration.tests>true</skip.integration.tests>
		<skip.unit.tests>true</skip.unit.tests>
	</properties>


	<dependencies>
	</dependencies>
	<build>

		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>

			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.version}</version>
				<executions>
					<!-- Prepares the property pointing to the JaCoCo runtime agent which 
						is passed as VM argument when Maven the Surefire plugin is executed. -->
					<execution>
						<id>pre-unit-test</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${jacoco.ut.execution.data.file}</destFile>
							<!-- Sets the name of the property containing the settings for JaCoCo 
								runtime agent. -->
							<propertyName>surefireArgLine</propertyName>
						</configuration>
					</execution>
					<!-- Ensures that the code coverage report for unit tests is created 
						after unit tests have been run. -->
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal> <!-- report-aggregate -->
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>${jacoco.ut.execution.data.file}</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
						</configuration>
					</execution>


					<!-- Prepares the property pointing to the JaCoCo runtime agent which 
						is passed as VM argument when Maven the Failsafe plugin is executed. -->
					<execution>
						<id>pre-integration-test</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${jacoco.it.execution.data.file}</destFile>
							<!-- Sets the name of the property containing the settings for JaCoCo 
								runtime agent. -->
							<propertyName>failsafeArgLine</propertyName>
						</configuration>
					</execution>
					<!-- Ensures that the code coverage report for integration tests after 
						integration tests have been run. -->
					<execution>
						<id>post-integration-test</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>${jacoco.it.execution.data.file}</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Used for unit tests -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.15</version>
				<configuration>
					<!-- Sets the VM argument line used when unit tests are run. -->
					<argLine>${surefireArgLine}</argLine>
					<!-- Skips unit tests if the value of skip.unit.tests property is true -->
					<skipTests>${skip.unit.tests}</skipTests>
					<!-- Excludes integration tests when unit tests are run. -->
					<excludes>
						<exclude>**/IT*.java</exclude>
					</excludes>
				</configuration>
			</plugin>
			<!-- Used for integration tests -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.15</version>
				<executions>
					<!-- Ensures that both integration-test and verify goals of the Failsafe 
						Maven plugin are executed. -->
					<execution>
						<id>integration-tests</id>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
						<configuration>
							<!-- Sets the VM argument line used when integration tests are run. -->
							<argLine>${failsafeArgLine}</argLine>

							<!-- Skips integration tests if the value of skip.integration.tests 
								property is true -->
							<skipTests>${skip.integration.tests}</skipTests>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>


	<profiles>
		<profile>
			<id>all-tests</id>
			<properties>
				<build.profile.id>all-tests</build.profile.id>
				<!-- All tests are run. -->
				<skip.integration.tests>false</skip.integration.tests>
				<skip.unit.tests>false</skip.unit.tests>
			</properties>
		</profile>
		<profile>
			<id>dev</id>
			<properties>
				<build.profile.id>dev</build.profile.id>
				<skip.integration.tests>true</skip.integration.tests>
				<skip.unit.tests>false</skip.unit.tests>
			</properties>
		</profile>
		<profile>
			<id>integration-test</id>
			<properties>
				<!-- Used to locate the profile specific configuration file. -->
				<build.profile.id>integration-test</build.profile.id>
				<!-- Only integration tests are run. -->
				<skip.integration.tests>false</skip.integration.tests>
				<skip.unit.tests>true</skip.unit.tests>
			</properties>
		</profile>
	</profiles>
	<!-- Run SQL -->
	<!-- mvn clean verify -P integration-test -->

	<!-- mvn clean verify -P all-tests -->

	<!-- runs unit tests and creates the code coverage report for unit tests -->
	<!-- mvn clean test -->
</project>
